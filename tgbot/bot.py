import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from os import getenv
import aiohttp  # Import aiohttp for asynchronous HTTP requests

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
domain = getenv('TGBOT_DOMAIN')
protocol = getenv('TGBOT_PROTOCOL')
# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = getenv('TGBOT_TOKEN')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(f"–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:\n{protocol}://{domain}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def echo(message: types.Message):
    text = message.text
    async with aiohttp.ClientSession() as session:  # Create an aiohttp session
        async with session.post(f'{protocol}://{domain}/auth-api/checkauthtg/', ssl=False, json={'tg_id': message.from_user.id}) as response:
            if response.status == 404:
                async with session.post(f'{protocol}://{domain}/auth-api/authtg/', ssl=False, json={'uid': text, 'tg_id': message.from_user.id}) as check_response:
                    if check_response.status == 200:
                        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å")
                    else:
                        await message.reply(f"–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:\n{protocol}://{domain}")
            elif response.status == 200:
                await message.reply("–ü–µ—Ä–µ–¥–∞—é –¥–æ–∫—Ç–æ—Ä—É.")

@dp.callback_query_handler(lambda c: c.data.startswith('medication_'))
async def process_callback_button(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º uid –∏–∑ callback_data
    uid = callback_query.data.split('_')[1]
    await bot.answer_callback_query(callback_query.id)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    async with aiohttp.ClientSession() as session:  # Create an aiohttp session
        async with session.post(f'{protocol}://{domain}/auth-api/takepill/', ssl=False, json={'uid': uid}) as response:
            if response.status == 200:
                await bot.send_message(callback_query.from_user.id, "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ")
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                new_keyboard = {
                    "inline_keyboard": [[
                        {"text": "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ üëç", "callback_data": "nothing"}
                    ]]
                }
                await bot.edit_message_reply_markup(
                    chat_id=callback_query.from_user.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=new_keyboard
                )
            else:
                await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞")
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                new_keyboard = {
                    "inline_keyboard": [[
                        {"text": "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "callback_data": f"medication_{uid}"}
                    ]]
                }
                await bot.edit_message_reply_markup(
                    chat_id=callback_query.from_user.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=new_keyboard
                )


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
